exec("""from pynput import mouse\nfrom pyautogui import size\nfrom time import sleep\n\ndef coords_grab():\n    print(f"CoordGrabber Starting...")\n    # ANSI escape sequences for color\n    class c:\n        HEADER = '\033[95m'\n        OKBLUE = '\033[94m'\n        OKCYAN = '\033[96m'\n        OKGREEN = '\033[92m'\n        WARNING = '\033[93m'\n        FAIL = '\033[91m'\n        ENDC = '\033[0m' # end color\n        BOLD = '\033[1m'\n        UNDERLINE = '\033[4m'\n\n    # area calc and slope\n    def calc_area(x1, y1, x2, y2):\n        if x1 < x2: \n            width = x1 - x2\n        else:\n            width = x2 - x1\n        \n        if y1 > y2:\n            height = y2 - y1\n        else:\n            height = y1 - y2\n\n        sx, sy = size()\n        screen_area = sx * sy\n\n        calcArea = width * height\n        calcPercent = round((calcArea / screen_area) * 100, 2) # round percentage to 2 decimal places\n        \n        # safe incase div by zero\n        try:\n            calcSlope = round(height/width, 2)\n        except:\n            calcSlope = "undefined"\n\n        return (calcArea, calcPercent, calcSlope)\n\n    coords = []\n    def on_click(x, y, button, pressed):\n        if button == button.middle and pressed:\n            coords.append((x, y)) # add tuple with coords to list\n            on_click.count += 1\n            print(f"{c.OKGREEN}Capture{c.ENDC} {on_click.count}")\n            if on_click.count == 2:\n                return False # kill listener and exit func\n    on_click.count = 0 # keeps track of how many times you've clicked\n\n    with mouse.Listener(on_click=on_click) as listener:\n        print(f"{c.OKGREEN}Listener Joined.{c.ENDC} Middle click to capture coords")\n        listener.join()\n\n    # after 2 clicks\n    x1 = coords[0][0]\n    y1 = coords[0][1]\n    x2 = coords[1][0]\n    y2 = coords[1][1]\n\n    areaTuple = calc_area(x1,y1,x2,y2)\n\n    # add "," between thousands and replace the "," with " "\n    formattedArea = f"{areaTuple[0]:,}".replace(",", " ")\n    formattedPercent = areaTuple[1]\n    formattedSlope = areaTuple[2]\n    tuplePair = f"{coords[0]} {coords[1]}"\n    rawPair = f"{x1},{y1} {x2},{y2}"\n\n    sleep(0.5) # sleep to look cool\n\n    # the {c.OKGREEN} things are ANSI escape sequences for colors. {c.ENDC} goes to default term color\n    print(f"{c.WARNING}{'-'*28}{c.ENDC}") # 10 "-"\n    print(f"tuples: {tuplePair:>20}")\n    print(f"raw: {rawPair:>23}")\n    print(f"slope: {c.OKGREEN}{formattedSlope:>21}{c.ENDC}")\n    print(f"area: {c.OKGREEN}{formattedArea:>20}px{c.ENDC}")\n    print(f"% total: {c.OKGREEN}{formattedPercent:>18}%{c.ENDC}")\n    print(f"{c.WARNING}{'-'*28}{c.ENDC}") # 10 "-"\n\ncoords_grab()\n\n""")